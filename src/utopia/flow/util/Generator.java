package utopia.flow.util;

import java.util.function.Function;

import utopia.flow.structure.Lazy;
import utopia.flow.structure.Option;
import utopia.flow.structure.iterator.RichIterator;

/**
 * Generators are used for generating possibly infinite amount of values
 * @author Mikko Hilpinen
 * @since 14.5.2018
 * @param <T> The type of object generated by this generator
 */
public class Generator<T> implements RichIterator<T>
{
	// ATTRIBUTES	---------------------
	
	private Lazy<? extends T> firstItem;
	private Option<T> lastItem = Option.none();
	private Function<? super T, ? extends Option<T>> increase;
	private Option<T> polled = Option.none();
	
	
	// CONSTRUCTOR	---------------------
	
	/**
	 * Creates a new generator
	 * @param firstItem The first item that will be generated
	 * @param increase The increment function
	 */
	public Generator(Lazy<? extends T> firstItem, Function<? super T, ? extends Option<T>> increase)
	{
		this.firstItem = firstItem;
		this.increase = increase;
	}
	
	
	// IMPLEMENTED METHODS	------------

	@Override
	public boolean hasNext()
	{
		// Will repeat infinitely
		return true;
	}

	@Override
	public synchronized T next()
	{
		T newItem;
		
		if (polled.isDefined())
		{
			newItem = polled.get();
			polled = Option.none();
		}
		// If no item has been stored yet, uses the first item
		if (lastItem.isEmpty())
			newItem = firstItem.get();
		// Otherwise increments the last item, until no item is produced
		else
			newItem = increase.apply(lastItem.get()).getOrElse(firstItem::get);
		
		lastItem = Option.some(newItem);
		return newItem;
	}

	@Override
	public T poll()
	{
		T item = next();
		polled = Option.some(item);
		return item;
	}
}
